Target Locators:
--------------

Alert (Selenium WebDriver)

-In Selenium, an alert refers to a JavaScript Alert dialog box that is displayed by a web application.
-Alert dialogs are commonly used to present important messages, warnings, or prompts to the user.

-Selenium provides methods to handle various types of alerts, including simple alerts, confirmation alerts, and prompt alerts.
- Modal Dialog
- Not inspectable (it is javascript not a html code)

Here are the different types of alerts and how to handle them using Selenium:

Types

- Simple Dialog (Only one option) - Information !
- Confirm Dialog (2 options) - Confirmation !
- Prompt Dialog (Text Box + 2 Boolean) - Data Collection + Confirmation !

Methods

- accept    (Positive Action)
- dismiss   (Negative Action)
- sendKeys  (Type value on the prompt text) -- always clear before type
- getText   (Read the title and not the domain)

Alert alert = driver.switchTo().alert();

alert.accept();

alert.dismiss();

Simple Alerts:
===============
Simple alerts are basic message boxes with an OK button.
They display a message and require the user to click OK to accept/dismiss them.

To handle simple alerts, you can use the Alert class provided by Selenium.
steps to handle the alert:
step:1 You can switch to the alert using 
driver.switchTo().alert()
step:1 then accept the alert using alert.accept().


Confirmation Alerts:
====================
Confirmation alerts have two buttons: OK and Cancel.
They ask the user to confirm or cancel an action.

To handle confirmation alerts, 

Step1:you can switch to the alert using 

driver.switchTo().alert()

Step2:then accept or dismiss the alert using 
alert.accept()   
   or
alert.dismiss() 

Prompt Alerts:

Prompt alerts are similar to confirmation alerts but also include an input field.
They ask the user to enter some value or input.
To handle prompt alerts, 
Step1:you can switch to the alert using 
driver.switchTo().alert(), 
Step2:send keys to the input field using alert.sendKeys(), 

Step3:then accept or dismiss the alert using 
alert.accept() or alert.dismiss() 

syntax:
driver.SwitchTo().alert();

Limitation

- You cannot take snapshot of the alert 

Exception
- If you try interacting with DOM element without closing alert: UnhandledAlertException
- If you are interacting with an alert through code but alert did not appear: NoAlertPresentException

Sweet Alert - inspectable, Inspect -> findElement -> Click ! Can take snap !
driver.findElement(By.locator("")).click();
	
	
Class Room 1:
-------------
Launch https://leafground.com/alert.xhtml
Click on the Show button next to Prompt Dialog
Switch the driver focus to alert -driver.switchTo().alert()
Enter the text in the alert text box (using sendKeys)
Accept the alert (alert.accept();)
Confirm the text entered is displayed in the webpage
---------------------------------------------------------------------
<html>
<iframe>
   <html>
   </html>

Frame
======
Frame handling in Selenium refers to the process of interacting with HTML frames 
or iframes (inline frames) present within a web page.
Frames are used to divide a web page into multiple independent sections 
or sub-windows, where each frame can contain its own HTML document.

-it's important to understand how to switch focus between frames in order to
interact with elements inside them.
-Selenium provides methods and techniques to locate and switch to different frames within a web page.

- HTML element that helps developers to organize the set of elements

- iframe (tag) that means it is in-line frame (frame / frameset)


NoSuchElement

- Either your locator is wrong 
- Or the element may be living inside the frame

Exception

- NoSuchFrameException

Example for Overloading:

Methods to handle frame:
- frame(int index) // this is more than enough !
- frame(String nameOrId)
- frame(WebElement ele)

Locating Frames:

Frames can be located using various techniques such as index, name, ID, or by locating elements within the frame.
You can use methods:
driver.switchTo().frame(index), 
driver.switchTo().frame(nameOrId), 
or driver.switchTo().frame(element)to switch to a specific frame based on the locator strategy.

Switching to Frames:
======================
Once a frame is located, you can switch the driver's focus to that frame 
using driver.switchTo().frame(frameLocator).
After switching to a frame, any subsequent Selenium commands will be executed within that frame context.

Switching Back to Default Content:

To switch back to the main/default content or parent frame, 
you can use driver.switchTo().defaultContent()

This is necessary when you need to interact with elements
outside of any frames or switch to a different frame hierarchy.

Nested Frames:
==============
If you have frames within frames (nested frames),
you need to switch focus to each frame level by level.
You can switch to the parent frame using driver.switchTo().parentFrame()
or switch to a specific frame within the current frame context.

Come out of the frame
======================
- switch to defaultContent
------------------------------------------------------