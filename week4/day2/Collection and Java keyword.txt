Array:
-----
fixed in size
same data type

Collection
-----------
is an object groups of multiple element into single unit
any size
Dynamic memory
can grow or shrink 
insert delete modify
interface



List     Set

List
interface
object-->no

implementation class
1.ArrayList--->index-0 based on index[1,3,10,4,5,6]
a[2]=10;insert

a[4]=6;delete

a[5]=6;search

2.LinkedList

node based s1 s2 s3 s4 s5 s6 s7 end s3


List<wrapper Class> lstName=new ArrayList<wrapper Class>();

Example:
List<String> lstName=new ArrayList<String>();

List<Object> lstName=new ArrayList<Object>();


primitive type               wrapper class:

int                           Integer

float                         Float

double                        Double

long                           Long

short                          Short

boolean                        Boolean

char                           Character

Collection:
Interface
Dynamic size
Group of obj
Types:
List
=====
Interface
allow duplicate
Insertion order
single dimension
implementation class
1.ArrayList
index start from 0 a[0]=1;

a[0]=1;
a[1]=2;
a[2]=6;
a[3]=4;
a[4]=5;

search a[3]=? 4

2.LinkedList
Insertion order
node

List<String> lstname=new ArrayList<String>();

lstname.add();
lstname.remove();
lstname.clear();
lstname.contains();
lstname.size();
lstname.isEmpty();[]
lstname.get(indext);
Collections.sort(lstname);

Set
===
-Is also interface
-Not allow duplicate(only unique)
-single Dimension[]
String[]={};
-Dynamic Array

-Implementation class
1.HashSet

using Hasing algorithm 

Random result/fast result

2.LinkedHashSet
Maintain insertion order

3.TreeSet
Number order,Alphabetic order----->Ascii order
syntax
======
Set<wrapperclass>setname=new Implementation class<wrapperclass>();
setname.add();
setname.remove();
setname.clear();
setname.isEmpty();
setname.contains();
setname.get();--->implementation class????

Integer nums={1,2,3,4,56,}
forEach loop
for (DataType variableName : input) {
	
}
for (WebElement integer : nums) {
	
}

Set
interface
implementation class
1.HashSet---->Fast result--->Random
2.LinkedHashSet--->Insertion order 
3.TreeSet---->Ascii order ---->alphabet



Find the unique values from the array
 
 Integer[] nums ={1,2,1,2,3,4,5,4,5,6};
 output{}
 
 
  Constructor  Syntax:
  
  access modifier className()
  
  ClassName obj =new ClassName();
  
  
  Java Keywords:
  Static
  final
  super
  this
  Constructor,this
  
  Super--> The super keyword in java comes in a role with the concept of inheritance.
the super keyword refers to the object of an immediate parent class. It means the 
super keyword uses in subclasses to access the object of the superclass.
variable, constructor, and method of a superclass by using the super keyword. 
1. Java super keyword can access the variable of the parent class  
2. Java super keyword can invoke the constructor of the parent class
3. Java super keyword can access the method of the parent class



static keyword:

The static keyword can be used as a 
static variable, static method, static block, and static class. 

1.static keyword with variable it is called static variable

Syntax to declare the static variables:

static dataType variableName = value;

2. Static method in Java

You can declare a static method by using of static keyword.
1. Static methods are belonging to a class.
2. You can access a static method by using the class name. You do not have the need to create an object.
3. A static method can access only static variables. If you write any non-static variable in a static method,
then it will throw an exception at compilation time.
syntax:
access_modifier static return_Type method_Name()
{
    // body of method
}

final 
-----
its a keyword used to apply some restriction to the user
cvv-123

final can applied to classes,method,variable

1.final variable-constant you cannot changes the value
2.final method-you cannot override the final method
3.final class-you cannot extends the final class